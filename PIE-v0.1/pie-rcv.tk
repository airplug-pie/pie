#    pie
#    a twitter-like app for airplug
#    authors: Christophe Boudet, Julien Castaigne, Jonathan Roudière,
#             Christophe Roquette, Jérémy Subtil
#    license type: free of charge license for academic and research purpose
#    see license.txt

### MODULE RECEPTION ##########################################################


### VARIABLES DU MODULE #######################################################

###############################################################################

#taille max de la fifo de reception des messages
set rcv_fifo_max 200

### PROCEDURE DU MODULE #######################################################

###############################################################################


##########################################################################
# Nom		 : queue
# Role		 : gestion d'une fifo
#
# queue create nom max_size a b c d	: cree la queue nom de taille max_size avec les elements a b c d
# queue empty nom					: vide la queue
# queue put nom a b c				: ajoute a b et c a la queue nom
# queue get nom						: defile un element de nom
# queue max nom						: retourne la taille max definit a la creation de nom
# queue present nom a				: test si "a" est present dans nom
# queue size nom					: retourne le nombre d'element de nom
#
##########################################################################
namespace eval queue {
    namespace ensemble create -subcommands {create put get empty max present size} 
    proc create {queueVar size args} {
    	global queu_size
        upvar 1 $queueVar queue
        set queu_size($queueVar) $size
       
        set queue $args
    }
    proc put {queueVar args} {
        upvar 1 $queueVar queue
        lappend queue {*}$args
    }
    proc get {queueVar} {
        upvar 1 $queueVar queue
        set head [lindex $queue 0]
        set queue [lrange $queue[set queue ""] 1 end]
        return $head
    }
    proc empty {queueVar} {
        upvar 1 $queueVar queue
        expr {![llength $queue]}
    }
    
    proc max {queueVar} {
    	global queu_size
        return $queu_size($queueVar)
    }
    
    proc size {queueVar} {
    	upvar 1 $queueVar queue
    	return [llength $queue]
    }
    
    proc present {queueVar var} {
    	upvar 1 $queueVar queue
    	return [lsearch -exact $queue $var]
    	
    	if { [lsearch -exact $queue $var] == 1 } {
    		#puts [lsearch -exact $queue $var]
    		return 1
		} else {
			#puts [lsearch -exact $queue $var]
			return 0
		}
    }

}



##########################################################################
# Nom		 : APG_receive_what
# Role		 : Surcharge de la procedure de libapgtk afin de traiter le message recu
# Parametres : Le message
# Retourne	 : Rien
##########################################################################
proc APG_receive_what { what } {
	global rcv_fifo
	
	set ::PIE_rcv_msg $what
	#gui_netmesg $::PIE_rcv_msg" input	 

	#decoupage du message
	set msg_from [APG_msg_splitstr ::PIE_rcv_msg FROM]
	set msg_nick [APG_msg_splitstr ::PIE_rcv_msg NICK]
	set msg_ttl [APG_msg_splitstr ::PIE_rcv_msg TTL]
	set msg_tts [APG_msg_splitstr ::PIE_rcv_msg TTS]
	set msg_type [APG_msg_splitstr ::PIE_rcv_msg TYPE]
	
	
	#######type hearbeat#######
	if {$msg_type == "0"} {
   		set msg_offre [APG_msg_splitstr ::PIE_rcv_msg $::PIE_msg_key_hb_offers]
   		set msg_forward [APG_msg_splitstr ::PIE_rcv_msg $::PIE_msg_key_hb_forward]
   		
		#gestion des offres
		PIE_proc_offers $msg_offre
		
		#gestion des forwards
		PIE_proc_forwards $msg_forward
	
	}
	
	
	#######type message#######
	if {$msg_type == "1"} {
		set msg_id [APG_msg_splitstr ::PIE_rcv_msg ID]
		set msg_date [APG_msg_splitstr ::PIE_rcv_msg DATE]
		set msg_content [APG_msg_splitstr ::PIE_rcv_msg MSG]
		
		
		#test si deja traite via la fifo
		if { [queue present rcv_fifo $msg_id] == -1 } {
			queue put rcv_fifo $msg_id
			
			#defile si trop long
			if { [expr [queue size rcv_fifo] - [queue max rcv_fifo]] > 0 } {
				queue get rcv_fifo"
			}
			
				
			
			#test si on est abonné
			if {[storage.issubscribed $msg_from $msg_nick] != "" } {		
			
				#recuperation du stream
				set str [storage.new_stream $msg_from $msg_nick]
				if { [string length $str] == 0 } {
					set str [storage.stream_search $msg_from $msg_nick]
				}
				
				#incrementation du nombre de msg recus
				$str.nb_mesg_up
				
				#mise a jour de la date du dernier message
				$str.time_lastmsg_up
				
				#affichage du msg
				gui_stream_recvmesg $str $msg_content 
				
				if {$msg_tts > 1} {
					set msg_tts [expr $msg_tts - 1]
				} else {
					set msg_ttl [expr $msg_ttl - 1]
				}	
			
			} else {
				#test si on a des voisins intéressé
				if {[storage.isforwarded $msg_from $msg_nick] != ""} {
					set msg_tts [expr $msg_tts - 1]
				} else {
					set msg_ttl [expr $msg_ttl - 1]
				}
			}
			
			
			#on relay le msg
			if {$msg_ttl > 0} {
				set msg [ PIE_gen_header $msg_ttl $msg_tts $msg_type ]
	
	  			APG_msg_addmsg msg $::PIE_msg_key_post_id $msg_id
  				APG_msg_addmsg msg $::PIE_msg_key_post_date $msg_date
  				APG_msg_addmsg msg $::PIE_msg_key_post_content $msg_content
  
  				PIE_send_what $msg
  				PIE_log_send_pie $msg	
			} else {
				return 0
			}


		} else {
			#deja traite
			return 0
		}
		
	}

	

}




#######################INITALISATION###################################################
queue create rcv_fifo $rcv_fifo_max

